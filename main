import string
import random

def generate_password(length, uppercase=True, lowercase=True, digits=True, special_chars=True):
    characters = ''
    
    if uppercase:
        characters += string.ascii_uppercase
    if lowercase:
        characters += string.ascii_lowercase
    if digits:
        characters += string.digits
    if special_chars:
        characters += string.punctuation

    if not characters:
        print("无效的字符类型选择。")
        return None

    password = ''.join(random.choice(characters) for _ in range(length))
    return password

print("密码生成器命令行工具")

while True:
    print("\n请选择操作：")
    print("1. 生成密码")
    print("2. 退出程序")

    choice = input("请选择操作（输入数字）：")

    if choice == '2':
        print("谢谢使用，再见！")
        break

    if choice == '1':
        length = int(input("请输入密码长度："))
        uppercase = input("是否包含大写字母？（y/n）: ").lower() == 'y'
        lowercase = input("是否包含小写字母？（y/n）: ").lower() == 'y'
        digits = input("是否包含数字？（y/n）: ").lower() == 'y'
        special_chars = input("是否包含特殊字符？（y/n）: ").lower() == 'y'
        
        password = generate_password(length, uppercase, lowercase, digits, special_chars)
        if password:
            print("生成的密码：", password)
    else:
        print("无效的选择，请重新输入。")
//以上代码是一个简单的密码生成器命令行工具。用户可以选择生成密码，并提供密码的长度和包含的字符类型。

//generate_password() 函数根据用户的选择和参数生成随机的密码。函数根据用户选择的字符类型构建字符集，然后随机选择字符生成指定长度的密码。

//应用程序使用一个无限循环来等待用户输入操作和相应的信息，并根据用户选择执行相应的操作。用户可以选择退出程序来结束应用程序的运行。

//请注意，这只是一个简单的示例，密码生成过程是基于随机选择字符的方式。在实际项目中，您可能需要考虑更多的密码生成策略和密码强度评估，以实现一个更强大和安全的密码生成器工具。
